Bugs:
- Friction should decrease velocity
- Fuzzy GLUT text in Windows
- GameObj._setBody needs to destroy old body
- Why doesn't camera centering work perfectly?
- Put the division fix into all modules
- DCameraLead gets shakey when framerate dips (try with profiling to see)
- Get ui.msecs from the main loop in app (better yet, vice versa)

Short term features:
- DCameraLead has right idea for offset type, but needs more smarts about when to offset.
  See how awesomely "Yoshi's Island" handles this, and Super Mario World for simpler example.
  Possible idea: require that velocity be above min a certain amount of time before starting movement.
- Maybe do DCameraLead movement similar to the way the space-division camera worked
  (only capped at a certain velocity, to prevent it from being way too fast at the beginning).
- Make console 'help()' work better
- Camera that understands teleports (DCameraPan w/ return)
- Magnets also move magnet towards pulled object
- Antialiasing
- Options dialog, saving options
- Changing resolution/fullscreen state (Windows and Linux)
- Collide2 (and maybe contact groups) to decrease spurious collisions
- Level loading
- Control mapping
- Gamepad support
- HUD, real FPS display
- Level testing architecture
- Unit tests for modules
- For checking draw clipping, have another Drive method
- Derive body/geom (scaling, 2d, angle conversion)

Long term features:
- Level editor w/ carefully designed palette
- Limb animation
- Particles
- Tutorial & test levels
- Lighting effects
- Sound
- Windows launcher (maybe self-contained binary)

Design notes:
- Don't have Drive in one GameObj keep refs to other Drives; refs to GameObjs instead

----
Theoretical Controller Configuration:
Gamepad with 6 buttons and stick or d-pad:
 L     R
 |     A
---   B C
 |     D

Ground movement:
D: Jump
Stick away from ground: Stand
Stick towards ground: Crouch/add extra friction when sliding
Stick parallel to ground: Walk/crawl

Air movement:
Stick: Slow drift (only available to the degree that you've already got velocity, and it lowers total velocity)

Pulsing:
Tap B: Pulse to stop motion (if already still, just a waste of energy)
Tap B + Direction: Pulse
Hold B, Release B (+ optional direction): Charged pulse
Hold B, Push A: Cancel pulse charge

Sword:
Tap C (+ optional direction, defaults to facing/vel direction): Sword attack
Hold C, Release (+ optional direction): Charged sword attack
Hold C, Push A: Cancel sword charge

Interaction:
A (+ optional direction, defaults to nearest interactable object): Grab
A while holding object: Drop object (release with no force)
Hold A while holding object, release A (+ optional direction, defaults to facing direction): Throw held object

Magnets and Gravity:
L: Blue magnetic field
R: Red magnetic field
L+R Hold (1sec): Toggle anti-grav field
