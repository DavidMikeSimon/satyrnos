
Bugs:
- Have proper destruction semantics; I'll have to fake it, since Python doesn't have immediate dtors
	Needed so that geoms (and, if I can find a way to delete them, bodies) don't accumulate
- Not even extreme velocity can overcome stalling; need to re-do stalling with addForce
- Tapping attack while holding direction should not make Satyrn move
- Cap linear velocity for avatar; make it a low cap for cruising, then ramp up cruising accel
- Mold generators that load from images should use resman
- Friction should decrease velocity
- Things tend to fall through ComplexGeoms
- Enforce particular winding order in ComplexGeom
- Fuzzy GLUT text in Windows
- GameObj._setBody needs to destroy old body
- Why doesn't camera centering work perfectly?
- Put the division fix into all modules
- DCameraLead gets shakey when framerate dips (try with profiling to see)
- Get ui.msecs from the main loop in app (better yet, vice versa)

Short term features:
- Keep Geoms in Hulls in GameObjs, not Hulls in Geoms in GameObjs
- Use Geoms in DLineMagnet and DRectMagnet, like was done with DMagnet
- Script to generate hulls, add classes to geometry.pm for ODEifying/drawing arbitrary hulls
- DSprite should use step for advancement, not draw (so we can use sprite for timing)
- Joint system needs to make more sense
- Simple camera like NSMB (force Satyrn to stay inside box 1/6 of screensize)
- Make console 'help()' work better
- Magnets also move magnet towards pulled object
- Antialiasing
- Options dialog, saving options
- Changing resolution/fullscreen state (Windows and Linux)
- Level loading
- Control mapping
- Gamepad support
- HUD, real FPS display
- Level testing architecture
- Unit tests for modules
- For checking draw clipping, have another Drive method
- Derive body/geom (scaling, 2d, angle conversion)

Long term features:
- Level editor w/ carefully designed palette
- Particles
- Tutorial & test levels
- Lighting effects
- Sound
- Ropes and chains
- Windows launcher (maybe self-contained binary)

Design notes:
- Don't have Drive in one GameObj keep refs to other Drives; refs to GameObjs instead

----
Theoretical Controller Configuration:
Gamepad with 6 buttons and stick or d-pad:
 L     R
 |     A
---   B C
 |     D


Lantern:
Push stick: Lantern moves towards opposite side (works on ground and in air)

Ground movement:
Stick away from ground: Stand, which allows walking and boosting to leave surface.
Stick towards ground: Crouch, which does not allow walking or boosting to leave surface.
Stick parallel to ground, while standing: Walk.

Boosting:
Hold D + Direction: Boost in that direction
Hold D in air w/o Direction: Boost against velocity (stall)
Hold D while standing w/o Direction: Boost away from ground
Hold D while crouching w/o Direction: Boost towards ground

Sword (attacking with sword also changes orientation):
B: Sword attack in current orientation
B + Direction: Change orientation and sword attack

Interaction:
A: Use held object
C (+ optional direction, defaults to nearest interactable object): Grab
C while holding object: Drop object (release with no force)
C while holding object + direction: Throw held object

Magnets and Gravity:
L: Blue magnetic field
R: Red magnetic field
